class Solution{
    int longestUniqueSubsttr(String S){
        int[] count = new int[26];
        int len = 0;
        
        for(int i=0,j=0; i<S.length();){
            if(count[S.charAt(i) - 'a'] == 0){
                len = Math.max(len,i-j+1);
                count[S.charAt(i++) - 'a']++;
                
            }
            else{
                    count[S.charAt(j++) - 'a']--;
                }
        }
        return len;
    }
}

Time Complexity: O(n + d) where n is length of the input string and d is number of characters in input string alphabet.
For example, if string consists of lowercase English characters then value of d is 26. 
Auxiliary Space: O(d) 
