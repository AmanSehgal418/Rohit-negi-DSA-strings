class Solution 
{ 
    String removeReverse(String S) 
    { 
        // code here
        
        HashMap<Character, Integer> map = new HashMap<>();
        int i=0, j=S.length()-1;
        boolean rev = false;
        HashSet<Integer> del = new HashSet<>();
        
        for(char ch : S.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0)+1);
        }
        
        while(i<j){
            char first = S.charAt(i);
            char last = S.charAt(j);
            
            if(!rev){
                if(map.get(first) > 1){
                    map.put(first, map.get(first)-1);
                    del.add(i);
                    rev = !rev;
                }
                i++;
            } else {
                if(map.get(last) > 1){
                    map.put(last, map.get(last)-1);
                    del.add(j);
                    rev = !rev;
                }
                j--;
            }
        }
        StringBuilder ans = new StringBuilder();
        
        for(i=0; i<S.length(); i++){
            if(!del.contains(i)) ans.append(S.charAt(i));
        }
        
        if(rev) return ans.reverse().toString();
        
        return ans.toString();
    }
} 

Time Complexity : O(N)
Space Complexity: O(N)

OR

class Solution 
{ 
    String removeReverse(String S) 
    { 
        // code here
         StringBuffer s = new StringBuffer(S);
        int freq[] = new int[26];
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            freq[ch-'a']++;
        }
        
        int flag=1;
        while(flag==1)
        {
            int k=0;
            for( k=0; k<26; k++)
            {
                if(freq[k]>1)
                {
                    break;
                }
            }
            if( k==26) flag=0;
            
            int idx=-1;
            for(int i=0;i<s.length();i++)
            {
                if( (s.charAt(i)!='#') && (freq[s.charAt(i)-'a']>1))
                {
                    idx=i;
                    freq[s.charAt(i)-'a']--;
                    break;
                }
            }
            if(idx==-1)
            break;
            
            s.replace(idx,idx+1, "#");
            s.reverse();
            
        }
         String ans="";
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)!='#')
                ans+=s.charAt(i);
        }
        return ans;
    }
}

Time Complexity : O(N)
Space Complexity: O(1)

