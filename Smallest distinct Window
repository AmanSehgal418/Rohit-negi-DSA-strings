class Solution {
    public int findSubString( String str) {
        int n = str.length();
 
        String s = str;
        
        HashSet<Character>set = new HashSet<>();
        for(int i=0; i<n; i++){
            set.add(str.charAt(i));
        }
        
        int dist_count =set.size(), curr_count = 0, inc = 0, exc = 0;
        int minsize = Integer.MAX_VALUE;
        int map[] = new int[256];
        
        while(inc<n){
            map[s.charAt(inc)]++;
            if(map[s.charAt(inc)] == 1) curr_count++;
            
         if(curr_count == dist_count){
            while(map[s.charAt(exc)]>1){
                map[s.charAt(exc)]--;
                exc++;
            }
            
        int curr_size = inc-exc+1;
            minsize = Math.min(curr_size, minsize);
         }
         inc++;
        }
        
        return minsize;
    }
}

Time Complexity: O(N). 
As the string is traversed using two pointers only once.
Space Complexity: O(N). 
As a hash_map is used of size N
