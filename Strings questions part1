// java program to reverse a word
 
import java.io.*;
import java.util.Scanner;
 
class GFG {
    public static void main (String[] args) {
       
        String str= "Geeks", nstr="";
        char ch;
       
      System.out.print("Original word: ");
      System.out.println("Geeks"); //Example word
       
      for (int i=0; i<str.length(); i++)
      {
        ch= str.charAt(i); //extracts each character
        nstr= ch+nstr; //adds each character in front of the existing string
      }
      System.out.println("Reversed word: "+ nstr);
    }
}

// Java program to ReverseString using StringBuilder
import java.lang.*;
import java.io.*;
import java.util.*;
 
// Class of ReverseString
class ReverseString {
    public static void main(String[] args)
    {
        String input = "Geeks for Geeks";
 
        StringBuilder input1 = new StringBuilder();
 
        // append a string into StringBuilder input1
        input1.append(input);
 
        // reverse StringBuilder input1
        input1.reverse();
 
        // print reversed String
        System.out.println(input1);
    }
}
// Java program to Reverse a String using swapping
// of variables
import java.lang.*;
import java.io.*;
import java.util.*;
 
// Class of ReverseString
class ReverseString {
    public static void main(String[] args)
    {
        String input = "Geeks For Geeks";
        char[] temparray = input.toCharArray();
        int left, right = 0;
        right = temparray.length - 1;
 
        for (left = 0; left < right; left++, right--) {
            // Swap values of left and right
            char temp = temparray[left];
            temparray[left] = temparray[right];
            temparray[right] = temp;
        }
 
        for (char c : temparray)
            System.out.print(c);
        System.out.println();
    }
}

// Java program to demonstrate conversion from
// String to StringBuffer and reverse of string
import java.lang.*;
import java.io.*;
import java.util.*;
 
public class Test {
    public static void main(String[] args)
    {
        String str = "Geeks";
 
        // conversion from String object to StringBuffer
        StringBuffer sbr = new StringBuffer(str);
        // To reverse the string
        sbr.reverse();
        System.out.println(sbr);
    }
}

2. Check if strings are rotations of each other or not:-

// Java program to check if two given strings are rotations
// of each other
 
class StringRotation {
    /* Function checks if passed strings (str1 and str2)
       are rotations of each other */
    static boolean areRotations(String str1, String str2)
    {
        // There lengths must be same and str2 must be
        // a substring of str1 concatenated with str1.
        return (str1.length() == str2.length())
            && ((str1 + str1).indexOf(str2) != -1);
    }
 
    

3.Maximum Occuring Character:-

class Solution
{
    //Function to find the maximum occurring character in a string.
    public static char getMaxOccuringChar(String line)
    {
        // create HashMap to store frequency of every character
        HashMap<Character, Integer> mp = new HashMap<>();
         
        // to store length of string
        int n = line.length();
         
        // to store answer
        char ans = Character.MIN_VALUE;
         
        // to check count of answer character is less or greater
        // than another elements count
        int cnt = 0;
         
        // traverse the string
        for(int i = 0; i < n; i++) {
             
            // push element into map and increase its frequency
            char c = line.charAt(i);
            mp.put(c, mp.getOrDefault(c, 0) + 1);
             
            // update answer and count
            if(cnt < mp.get(c)) {
                ans = c;
                cnt = mp.get(c);
            }
            
            if(mp.get(c) == cnt && c<ans){
                ans = c;
            }
        }
    
         return ans;
         
    }
    
}

4.BINARY STRINGS:-

class Solution
{
    //Function to count the number of substrings that start and end with 1.
    public static int binarySubstring(int a, String str)
    {
         int c=0;
         for(int i=0;i<str.length();++i)
         {
             //counting number of 1's in the string.
             if(str.charAt(i)=='1')
             ++c;
         }
         //returning count of possible pairs among total number of 1's.
         return (c*(c-1))/2;
    }
}

5.ANAGRAM OF STRINGS:-

class GFG {
 
    final static int CHARS = 26;
 
    static int countDeletions(String str1, String str2) {
        int arr[] = new int[CHARS];
        for (int i = 0; i < str1.length(); i++) {
            arr[str1.charAt(i) - 'a']++;
        }
 
        for (int i = 0; i < str2.length(); i++) {
            arr[str2.charAt(i) - 'a']--;
        }
 
        int ans = 0;
        for (int i = 0; i < CHARS; i++) {
            ans += Math.abs(arr[i]);
        }
        return ans;
    }
}

OR  

import java.util.HashMap;
import java.util.Map;
 
public class Main {
 
    public static int makeAnagram(String a, String b) {
        // Initialize a map object with the characters in string a
        Map<Character, Integer> freq = new HashMap<>();
        for (char c : a.toCharArray()) {
            freq.put(c, freq.getOrDefault(c, 0) + 1);
        }
 
        // Subtract the characters in string b from the map object
        for (char c : b.toCharArray()) {
            freq.put(c, freq.getOrDefault(c, 0) - 1);
        }
 
        // Calculate the sum of absolute values of counts in the map object
        int count = 0;
        for (int val : freq.values()) {
            count += Math.abs(val);
        }
        return count;
    }


6.MERGE TWO STRINGS:-

class Solution 
{ 
    String merge(String S1, String S2)
    { 
       int len1 = S1.length(), i=0;
       int len2 = S2.length(), j=0;
       
       String Result = "";
       
       while(i < len1 && j < len2)
           Result += (S1.charAt(i++) + "" + S2.charAt(j++));
           
           while(i < len1) 
            Result += S1.charAt(i++);
            
           while(j < len2)
            Result += S2.charAt(j++);
       
        return Result;
    }
    
} 

7.REVERSE WORDS IN A GIVEN STRING:-

class Solution 
{
    //Function to reverse words in a given string.
    String reverseWords(String S)
    {
        String [] str = S.split("[.]");
         String temp = "";
         
         for(int i = str.length-1; i>=0; i--){
             if(i!=0)
               temp += str[i] + ".";
               
               else
                 temp += str[i];
                 
         }
         
         return temp;
    }
}

8.PALINDROME STRING:-

class Solution {
    int isPalindrome(String S) {
        
        int n = S.length() - 1;
        int i=0, j=0;
        
        for(i=0, j=n; i<=j; i++, j--){
            if(S.charAt(i) != S.charAt(j)){
                return 0;
            
            }
        }
        return 1;
    }
};

9.LONGEST COMMON PREFIX:=

class Solution{
    String longestCommonPrefix(String arr[], int n){
    
       // take temp_prefix string and assign first element of arr : a.
       String result = arr[0];
       
       // Iterate for rest of element in string.
       for(int i = 1; i < n; i++){
            // .indexOf() return index of that substring from string.
            while(arr[i].indexOf(result) != 0){
               
                // update matched substring prefx
                result = result.substring(0, result.length()-1);
               
                // check for empty case. direct return if true..
                if(result.isEmpty()){
                    return "-1";
                }
            }
        }
        return result;
    }
}

10.ROMAN NUMBER TO INTEGER:-

class Solution {
    // Finds decimal value of a given roman numeral
    public int romanToDecimal(String str) {
        
    HashMap<Character,Integer> map = new HashMap<Character,Integer>();
    map.put('I', 1);
    map.put('V', 5);
    map.put('X', 10);
    map.put('L', 50);
    map.put('C', 100);
    map.put('D', 500);
    map.put('M', 1000);
     int sum = 0;
    int n = str.length();
    for(int i = 0; i < n; i++)
    {
        // If present value is less than next value,
        // subtract present from next value and add the
        // resultant to the sum variable.
        if (i != n - 1 && map.get(str.charAt(i)) <
                          map.get(str.charAt(i + 1)))
        {
            sum += map.get(str.charAt(i + 1)) -
                   map.get(str.charAt(i));
            i++;
        }
        else
        {
            sum += map.get(str.charAt(i));
        }
    }
    return sum;
}
}

OR
// Program to convert Roman
// Numerals to Numbers
import java.util.*;

public class RomanToNumber {
	// This function returns
	// value of a Roman symbol
	int value(char r)
	{
		if (r == 'I')
			return 1;
		if (r == 'V')
			return 5;
		if (r == 'X')
			return 10;
		if (r == 'L')
			return 50;
		if (r == 'C')
			return 100;
		if (r == 'D')
			return 500;
		if (r == 'M')
			return 1000;
		return -1;
	}

	// Finds decimal value of a
	// given roman numeral
	int romanToDecimal(String str)
	{
		// Initialize result
		int res = 0;

		for (int i = 0; i < str.length(); i++) {
			// Getting value of symbol s[i]
			int s1 = value(str.charAt(i));

			// Getting value of symbol s[i+1]
			if (i + 1 < str.length()) {
				int s2 = value(str.charAt(i + 1));

				// Comparing both values
				if (s1 >= s2) {
					// Value of current symbol
					// is greater or equalto
					// the next symbol
					res = res + s1;
				}
				else {
					// Value of current symbol is
					// less than the next symbol
					res = res + s2 - s1;
					i++;
				}
			}
			else {
				res = res + s1;
			}
		}

		return res;
	}

	// Driver Code
	public static void main(String args[])
	{
		RomanToNumber ob = new RomanToNumber();

		// Considering inputs given are valid
		String str = "MCMIV";
		System.out.println("Integer form of Roman Numeral"
						+ " is "
						+ ob.romanToDecimal(str));
	}
}

11.LENGTH OF LAST WORD:-

class Solution {
    public int lengthOfLastWord(String s) {
        
        String S1 = s.trim();

        char[] ch = S1.toCharArray();
        int cnt = 0;

        for(int i=ch.length-1; i>=0; i--){
           cnt++;
           if(ch[i] == ' '){
               return cnt-1;
           }
        }
        return cnt;
    }
}

12.LENGTH OF LONGEST SUBSTRING WITHOUT REPEATING CHARACTERS:- 

class Solution{
    static int longestSubstrDistinctChars(String S){
       
       // Creating a set to store the last positions of occurrence
    HashMap<Character, Integer> seen = new HashMap<>(); 
    int maximum_length = 0;
 
    // starting the initial point of window to index 0
    int left = 0;
 
    for(int right = 0; right < S.length(); right++)
    {
      // Checking if we have already seen the element or not
      if(seen.containsKey(S.charAt(right)))
      {
        // If we have seen the number, move the start pointer
        // to position after the last occurrence
        left = Math.max(left, seen.get(S.charAt(right)) + 1);
      }
 
      // Updating the last seen value of the character
      seen.put(S.charAt(right), right);
      maximum_length = Math.max(maximum_length, right-left + 1);
    }
    return maximum_length;
    }
 }

13.Remove all duplicates from a given string:-

class Solution {
    String removeDuplicates(String str) {
        
   
        String s = new String();
        int len = str.length();
         
        // loop to traverse the string and
        // check for repeating chars using
        // IndexOf() method in Java
        for (int i = 0; i < len; i++)
        {
            // character at i'th index of s
            char c = str.charAt(i);
             
            // if c is present in str, it returns
            // the index of c, else it returns -1
            if (s.indexOf(c) < 0)
            {
                // adding c to str if -1 is returned
                s += c;
            }
        }
         
        return s;
    }
}
 OR

import java.util.*;
 
class GFG {
     
    static void removeDuplicate(char str[], int n)
    {
       // Create a set using String characters
    // excluding '\0'
        HashSet<Character> s = new LinkedHashSet<>(n - 1);
      // HashSet doesn't allow repetition of elements
        for (char x : str)
            s.add(x);
 
        // Print content of the set
        for (char x : s)
            System.out.print(x);
    }
 
    // Driver code
    public static void main(String[] args)
    {
        char str[] = "geeksforgeeks".toCharArray();
        int n = str.length;
 
        removeDuplicate(str, n);
    }
}
 OR

import java.util.*;
 
class GFG{
static char[] removeDuplicates(char []s,int n){
  Map<Character,Integer> exists = new HashMap<>();
 
  String st = "";
  for(int i = 0; i < n; i++){
    if(!exists.containsKey(s[i]))
    {
      st += s[i];
      exists.put(s[i], 1);
    }
  }
  return st.toCharArray();
}

14.MINIMUM NUMBER OF FLIPS:-

class Solution {
    public int minFlips(String S) {
        // Code here
        int flips=0;
//         idea is to calculate string flips when the string starts from 1 and then use (length - calculated) to get the flips when the string starts from 0
//         finally return the minimum
        for(int i=0;i<S.length();i++)
        {
//             If there is a 0 at even index then we need to flip it
            if(i%2==0)
            {
                if(S.charAt(i)=='0') flips++;
            }
//             If there is a 1 at odd index then we need to flip it
            else if(i%2!=0)
            {
                if(S.charAt(i)=='1') flips++;
            }
        }
//         minmum flips would either be the flips in making string start with 1 or with 0
        return Math.min(flips,S.length()-flips);
    }
}

15.META STRINGS:-

class Solution 
{ 
    boolean metaStrings(String S1, String S2) 
    { 
        int i = 0;
        int j = S1.length() - 1;
        
        if(S1.length() != S2.length()) return false;
        if(S1.equals(S2)) return false;
        
        while(S1.charAt(i) == S2.charAt(i)) i++;
        while(S1.charAt(j) == S2.charAt(j)) j--;
         char[] arr = S1.toCharArray();
         char temp = arr[i];
         arr[i] = arr[j];
         arr[j] = temp;
         
         String str = new String(arr);
         if(str.equals(S2)) return true;
         else{
              return false;
         }

         
    }
} 

16.SMALLEST SUBSTRING CONTAINING 0,1,2:-

// Java program for above approach
import java.util.*;
class GFG {

	// Function to find the length of the smallest substring
	public static int smallestSubstring(String S)
	{
		int res = Integer.MAX_VALUE;

		// To check 0, 1 and 2
		boolean zero = false, one = false, two = false;

		// To store indexes of 0, 1 and 2
		int zeroindex = 0, oneindex = 0, twoindex = 0;
		for (int i = 0; i < S.length(); i++) {
			if (S.charAt(i) == '0') {
				zero = true;
				zeroindex = i;
			}
			else if (S.charAt(i) == '1') {
				one = true;
				oneindex = i;
			}
			else if (S.charAt(i) == '2') {
				two = true;
				twoindex = i;
			}

			// Calculating length
			if (zero && one && two)
				res = Math.min( res,
					Math.max(zeroindex,Math.max(oneindex, twoindex))
				- Math.min( zeroindex,Math.min(oneindex, twoindex)));
		}

		// In case if there is no substring that contains 0,1 and 2
		if (res == Integer.MAX_VALUE)
			return -1;
		return res + 1;
	}

	// Driver Code
	public static void main(String[] args)
	{
		String S = "01212";
		// Function call
		System.out.print(smallestSubstring(S));
	}
}


